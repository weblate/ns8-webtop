#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import agent
import agent.ldapproxy
import urllib.request

api_endpoint = "http://localhost:" + os.environ["TCP_PORT"] + "/webtop/api/com.sonicle.webtop.core/v1"
api_headers={"Content-Type": "application/json", "Authorization": "Bearer " + os.environ["WEBAPP_API_TOKEN"]}

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

agent_id = os.getenv("AGENT_ID", "")
if not agent_id:
    raise Exception("AGENT_ID not found inside the environemnt")

# Connect to redis
rdb = agent.redis_connect()

webtop_request_https_certificate = os.environ["WEBTOP_REQUEST_HTTPS_CERTIFICATE"].lower() in ('true', '1', 't')
if data.get("request_https_certificate") is not None:
    if data.get("request_https_certificate") != webtop_request_https_certificate:
        webtop_request_https_certificate = data["request_https_certificate"]
        agent.set_env("WEBTOP_REQUEST_HTTPS_CERTIFICATE", data["request_https_certificate"])

# Configure Traefik to route WebTop's host requests to the webtop module
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
        'http2https': True,
        'lets_encrypt': webtop_request_https_certificate,
        'host': data["hostname"],
    },
)
# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)

# Configure the webapp
public_url = 'https://' + data["hostname"] + '/webtop'
dav_url = 'https://' + data["hostname"] + '/webtop-dav/server.php'

try:
    urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/public.url", data=public_url.encode(), headers=api_headers, method='PUT'))
    urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/davserver.url", data=dav_url.encode(), headers=api_headers, method='PUT'))
except urllib.error.URLError as e:
    raise Exception(f'Error reaching webapp daemon: {e.reason}')

agent.set_env("WEBTOP_HOSTNAME", data["hostname"])

if "locale" in data:

    locales = {
            'it_IT': {
                'LANGUAGE': 'it_IT',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd/MM/yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'en_US': {
                'LANGUAGE': 'en_EN',
                'START_DAY': '0',
                'DATE_FORMAT_LONG': 'MMM dd, yyyy',
                'DATE_FORMAT_SHORT': 'MM/dd/yy',
                'TIME_FORMAT_SHORT': 'h:mm a',
                'TIME_FORMAT_LONG': 'h:mm:ss a',
                },
            'de_DE': {
                'LANGUAGE': 'de_DE',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd.MM.yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'es_ES': {
                'LANGUAGE': 'es_ES',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd. MMM yyyy.',
                'DATE_FORMAT_SHORT': 'd/M/yy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'hr_HR': {
                'LANGUAGE': 'hr_HR',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd. MMM yyyy.',
                'DATE_FORMAT_SHORT': 'dd. MM. yyyy.',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'hu_HU': {
                'LANGUAGE': 'hu_HU',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'yyyy. MMMM dd.',
                'DATE_FORMAT_SHORT': 'yyyy.MM.dd.',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                },
            'fr_FR': {
                'LANGUAGE': 'fr_FR',
                'START_DAY': '1',
                'DATE_FORMAT_LONG': 'dd MMM yyyy',
                'DATE_FORMAT_SHORT': 'dd/MM/yyyy',
                'TIME_FORMAT_SHORT': 'HH:mm',
                'TIME_FORMAT_LONG': 'HH:mm:ss',
                }
            }

    try:
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.languageTag", data=locales[data['locale']]['LANGUAGE'].encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.startDay", data=locales[data['locale']]['START_DAY'].encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.format.date.short", data=locales[data['locale']]['DATE_FORMAT_SHORT'].encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.format.date.long", data=locales[data['locale']]['DATE_FORMAT_LONG'].encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.format.time.short", data=locales[data['locale']]['TIME_FORMAT_SHORT'].encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.format.time.long", locales[data['locale']]['TIME_FORMAT_LONG'].encode(), headers=api_headers, method='PUT'))
    except urllib.error.URLError as e:
        raise Exception(f'Error reaching webapp daemon: {e.reason}')

    agent.set_env("WEBTOP_LOCALE", data["locale"])

if "timezone" in data:
    try:
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/default.i18n.timezone", data=data["timezone"].encode(), headers=api_headers, method='PUT'))
    except urllib.error.URLError as e:
        raise Exception(f'Error reaching webapp daemon: {e.reason}')

    agent.set_env("WEBTOP_TIMEZONE", data["timezone"])

    agent.set_env("RESTART_WEBAPP", "1")
    agent.set_env("RESTART_WEBDAV", "1")
    agent.set_env("RESTART_Z_PUSH", "1")

if "mail_module" in data:
    mail_module = data["mail_module"]

    smtp_host = rdb.hget(f"module/{mail_module}/srv/tcp/submission", "host") or ""
    smtp_port = rdb.hget(f"module/{mail_module}/srv/tcp/submission", "port") or ""

    imap_host = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "host") or ""
    imap_port = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "port") or ""

    # Save the mail module UUID to automatically re-configure the module if it is
    # already available:
    mail_uuid = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "module_uuid") or ""
    agent.set_env("MAIL_MODULE_UUID", mail_uuid)

    agent.set_env("Z_PUSH_IMAP_SERVER", imap_host)
    agent.set_env("RESTART_Z_PUSH", "1")

    response = agent.tasks.run(f"module/{mail_module}", action='reveal-master-credentials')
    agent.assert_exp(response['exit_code'] == 0)

    vmail_password = response['output']['password']

    try:
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/smtp.host", smtp_host.encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.core/smtp.port", smtp_port.encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.mail/default.host", imap_host.encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.mail/default.port", imap_port.encode(), headers=api_headers, method='PUT'))
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/settings/com.sonicle.webtop.mail/nethtop.vmail.secret", vmail_password.encode(), headers=api_headers, method='PUT'))
    except urllib.error.URLError as e:
        raise Exception(f'Error reaching webapp daemon: {e.reason}')

    user_domain_name = rdb.hget(f"module/{mail_module}/srv/tcp/imap", "user_domain") or ""
    user_domain = agent.ldapproxy.Ldapproxy().get_domain(user_domain_name) or {}

    user_domain_json =  {
            "enabled": True,
            "displayName": "NethServer",
            "authDomainName": user_domain_name,
            "domainName": user_domain_name,
            "publicURL": "https://" + data["hostname"] + "/webtop",
            "userAutoCreation": True,
            "dirUri": "ldapneth://accountprovider" + ":" + user_domain["port"],
            "dirAdmin": user_domain["bind_dn"],
            "dirPassword": user_domain["bind_password"],
            "dirConnSecurity": "OFF",
            "dirCaseSensitive": False,
            "dirRawParameters": {
                "loginDn": user_domain["base_dn"],
                "loginFilter": None,
                "userDn": user_domain["base_dn"],
                "userFilter": None,
                "userIdField": "uid",
                "userFirstnameField": "givenName",
                "userLastnameField": "sn",
                "userDisplayNameField": "gecos"
                },
            "passwordPolicies": {
                "minLength": None,
                "complexity": False,
                "avoidConsecutiveChars": False,
                "avoidOldSimilarity": False,
                "avoidUsernameSimilarity": False,
                "expiration": None,
                "verifyAtLogin": False
                }
            }

    if user_domain["schema"] == "ad":
        user_domain_json["dirRawParameters"]["loginFilter"] = "&(objectCategory=person)(objectClass=user)"
        user_domain_json["dirRawParameters"]["userIdField"] = "sAMAccountName"
        user_domain_json["dirRawParameters"]["userFilter"] = "(&(objectClass=user)(objectCategory=person)(!(isCriticalSystemObject=TRUE)))"
        user_domain_json["dirRawParameters"]["userDisplayNameField"] = "displayName"

    try:
        #Check if the domain already exist
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/domains/NethServer", headers=api_headers))
        #Update the doiman
        urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/domains/NethServer?update_options=3", json.dumps(user_domain_json).encode(), headers=api_headers, method='PUT'))
    except urllib.error.HTTPError as e:
        if e.code == 404:
            # Create the doiman
            user_domain_json["domainId"] = "NethServer"
            urllib.request.urlopen(urllib.request.Request(f"{api_endpoint}/admin/domains", json.dumps(user_domain_json).encode(), headers=api_headers, method='POST'))
            pass
    except urllib.error.URLError as e:
        raise Exception(f'Error reaching webapp daemon: {e.reason}')

    agent.set_env("MAIL_MODULE", mail_module)


if "webapp" in data:
    if "debug" in data["webapp"] and data["webapp"]["debug"] != os.getenv("WEBAPP_JS_DEBUG"):
            agent.set_env("WEBAPP_JS_DEBUG", data["webapp"]["debug"])
            agent.set_env("RESTART_WEBAPP", "1")
    if "min_memory" in data["webapp"] and data["webapp"]["min_memory"] != os.getenv("WEBAPP_MIN_MEMORY"):
            agent.set_env("WEBAPP_MIN_MEMORY", data["webapp"]["min_memory"])
            agent.set_env("RESTART_WEBAPP", "1")
    if "max_memory" in data["webapp"] and data["webapp"]["max_memory"] != os.getenv("WEBAPP_MAX_MEMORY"):
            agent.set_env("WEBAPP_MAX_MEMORY", data["webapp"]["max_memory"])
            agent.set_env("RESTART_WEBAPP", "1")

if "webdav" in data:
    if "debug" in data["webdav"] and data["webdav"]["debug"] != os.getenv("WEBDAV_DEBUG"):
            agent.set_env("WEBDAV_DEBUG", data["webdav"]["debug"])
            agent.set_env("RESTART_WEBDAV", "1")
    if "loglevel" in data["webdav"] and data["webdav"]["loglevel"] != os.getenv("WEBDAV_LOG_LEVEL"):
            agent.set_env("WEBDAV_LOG_LEVEL", data["webdav"]["loglevel"])
            agent.set_env("RESTART_WEBDAV", "1")

if "zpush" in data:
    if "loglevel" in data["zpush"] and data["zpush"]["loglevel"] != os.getenv("Z_PUSH_LOG_LEVEL"):
            agent.set_env("Z_PUSH_LOG_LEVEL", data["zpush"]["loglevel"])
            agent.set_env("RESTART_Z_PUSH", "1")
